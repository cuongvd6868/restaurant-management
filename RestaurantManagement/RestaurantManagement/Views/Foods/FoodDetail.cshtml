@model RestaurantManagement.Models.Food
<style>
    .star {
        font-size: 2rem;
        color: #ccc;
        cursor: pointer;
        transition: color 0.2s;
    }

        .star.selected {
            color: #FFD700; /* Màu vàng */
        }
</style>


<div class="food-detail">
    <div class="container">
        <img src="https://localhost:7081/api/foodimage/get/@Model.FoodID" alt="@Model.FoodName" class="food-detail_img" style="object-fit:cover;">
        <div class="food-detail_desc">
            <h2 class="title">@Model.FoodName</h2>
            <div class="rating">
                <img src="~/img/Icon/start.svg" alt="">
                <p>( 1 customer review )</p>
            </div>
            <h4 class="price">@Model.Price.ToString("C")</h4>
            <p class="sub-title">@Model.Description</p>
            <div class="food-detail_action">
                <div>
                    <a href="#">
                        <img src="~/img/Icon/tru.svg" alt="">
                    </a>
                </div>
                <p>1</p>
                <div>
                    <a href="#">
                        <img src="~/img/Icon/cong.svg" alt="">
                    </a>
                </div>
            </div>
            <div>
                <input type="hidden" name="foodId" id="foodId" value="@Model.FoodID" />
                <input type="hidden" name="price" id="price" value="@Model.Price" />
                <button id="add-to-cart_btn" type="submit" class="btn">Add To Cart</button>
            </div>
            <div class="more-inf">
                <p><strong>SKU:</strong>  PT322</p>
                <p><strong>CATEGORY:</strong>  Lunch</p>
                <p><strong>TAGS:</strong>  Sweets,Ghevar </p>
            </div>
        </div>
    </div>
</div>
<button type="button" class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#feedbackModal">
    Feedback
</button>
<div class="food-feedback">
    <h3>Customer Feedback</h3>
    <div id="feedback-list" class="feedback-list"></div>
</div>


<div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="feedbackModalLabel"> Feedback</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="ratingPoint" class="form-label">Rating</label>
                    <div id="starRating" class="d-flex gap-1">
                        <span class="star" data-value="1">&#9734;</span>
                        <span class="star" data-value="2">&#9734;</span>
                        <span class="star" data-value="3">&#9734;</span>
                        <span class="star" data-value="4">&#9734;</span>
                        <span class="star" data-value="5">&#9734;</span>
                    </div>
                    <input type="hidden" id="ratingPoint" value="0">
                </div>


                <div class="mb-3">
                    <label for="comment" class="form-label">Comment</label>
                    <textarea id="comment" class="form-control" rows="3" placeholder="Enter your feedback"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitFeedback()">Submit</button>
            </div>
        </div>
    </div>
</div>
<script>
      document.addEventListener("DOMContentLoaded", function () {
        const stars = document.querySelectorAll("#starRating .star");
        const ratingInput = document.getElementById("ratingPoint");

        function updateStars(rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    star.classList.add("selected");
                } else {
                    star.classList.remove("selected");
                }
            });
        }

        stars.forEach((star) => {
            star.addEventListener("click", function () {
                const value = parseInt(this.getAttribute("data-value"));
                ratingInput.value = value;
                updateStars(value);
            });

            star.addEventListener("mouseover", function () {
                const value = parseInt(this.getAttribute("data-value"));
                updateStars(value);
            });

            star.addEventListener("mouseleave", function () {
                updateStars(parseInt(ratingInput.value));
            });
        });
    });
    function showToast(message, type = "success") {
        Toastify({
            text: message,
            duration: 3000,
            gravity: "top",
            position: "right",
            backgroundColor: type === "success" ? "#4CAF50" : "#FF4B4B",
            close: true,
            stopOnFocus: true,
        }).showToast();
    }

    async function submitFeedback() {
        try {
            const token = localStorage.getItem("accessToken");
            if (!token) {
                showToast("You must be logged in to submit feedback.", "error");
                return;
            }

            const ratingPoint = document.getElementById("ratingPoint").value;
            const comment = document.getElementById("comment").value;

            const feedbackData = {
                foodFeedbackID: 0,
                foodID: @Model.FoodID,
                ratingPoint: parseInt(ratingPoint),
                comment: comment
            };

            const response = await fetch("https://localhost:7081/api/FoodFeedback/add", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(feedbackData)
            });


            if (response.ok) {
                showToast( "Feedback added successfully.");
                const modal = bootstrap.Modal.getInstance(document.getElementById("feedbackModal"));
                fetchFeedback();
                modal.hide();
                document.querySelector('.modal-backdrop').style.display = 'none';

            } else {
                showToast( "You must be logged in to submit feedback.", "error");
            }
        } catch (error) {
            console.error("Error submitting feedback:", error);
            showToast("An error occurred. Please try again.", "error");
        }
    }
</script>

<script>

    async function fetchFeedback() {
        try {
            const response = await fetch(`/api/FoodFeedback/list/@Model.FoodID`);
            const feedbacks = await response.json();

            const feedbackList = document.getElementById("feedback-list");
            feedbackList.innerHTML = '';

            if (feedbacks.length === 0) {
                feedbackList.innerHTML = '<p>No feedback available for this food.</p>';
                return;
            }

            feedbacks.forEach(feedback => {
                const feedbackItem = document.createElement("div");
                feedbackItem.classList.add("feedback-item");

                feedbackItem.innerHTML = `
                    <div class="feedback-header">
                        <img src="https://cdn-icons-png.flaticon.com/512/3607/3607444.png" alt="${feedback.customer.userName}" class="avatar">
                        <span class="username">${feedback.customer.userName || 'Anonymous'}</span>
                    </div>
                    <div class="feedback-body">
                        <p>Rating: ${'⭐'.repeat(feedback.ratingPoint)}</p>
                        <p>Comment: ${feedback.comment}</p>
                    </div>
                `;
                feedbackList.appendChild(feedbackItem);
            });
        } catch (error) {
            console.error("Error fetching feedback:", error);
            const feedbackList = document.getElementById("feedback-list");
            feedbackList.innerHTML = '<p>Error loading feedback.</p>';
        }
    }

    // Load feedback on page load
    document.addEventListener("DOMContentLoaded", fetchFeedback);
</script>

<style>
    .food-feedback {
        margin-top: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .feedback-item {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #eee;
        border-radius: 5px;
    }

    .feedback-header {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .username {
        font-weight: bold;
    }
</style>





<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>



<div style="padding-bottom: 200px;"></div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://kit.fontawesome.com/64d58efce2.js" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<script>
           $(document).ready(function () {
        $("#add-to-cart_btn").click(async function (event) {
            event.preventDefault(); // Ngăn chặn chuyển trang

            const token = localStorage.getItem("accessToken");
            if (!token) {
                window.location.href = "https://localhost:7081/Auth/Login";
                return;
            }

              var foodId = $('#foodId').val();
            var price = $('#price').val();


            if (!foodId || !price) {
                alert("Thông tin sản phẩm không hợp lệ.");
                return;
            }

            let cartData = {
                foodId: foodId,
                quantity: 1,
                price: parseFloat(price)
            };

            try {
                const response = await fetch("https://localhost:7081/api/Cart/AddToCart", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(cartData)
                });

                if (response.status === 401) {
                    window.location.href = "https://localhost:7081/Auth/Login";
                    return;
                }

                if (!response.ok) throw new Error("Không thể thêm vào giỏ hàng");

                Toastify({
                    text: "🛒 Sản phẩm đã thêm vào giỏ hàng!",
                    duration: 3000,
                    gravity: "top", // Xuất hiện ở trên
                    position: "right", // Góc phải
                    backgroundColor: "#28a745",
                    stopOnFocus: true, // Dừng khi di chuột vào
                }).showToast();

            } catch (error) {
                console.error("Lỗi khi thêm vào giỏ hàng:", error);
                alert("Có lỗi xảy ra. Vui lòng thử lại.");
            }
        });
    });
</script>